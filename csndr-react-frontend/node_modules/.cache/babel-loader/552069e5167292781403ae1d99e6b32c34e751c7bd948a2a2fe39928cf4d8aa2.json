{"ast":null,"code":"import axios from 'axios';\n\n/**\n * Configuration de base pour Axios\n * \n * Cette configuration définit :\n * - L'URL de base de l'API Laravel\n * - Les headers par défaut\n * - La gestion des erreurs\n * - La gestion des tokens d'authentification\n */\nconst api = axios.create({\n  // URL de base de l'API Laravel (à ajuster selon votre configuration)\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\n  // Headers par défaut\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  // Timeout de 10 secondes pour les requêtes\n  timeout: 10000\n});\n\n/**\n * Intercepteur pour ajouter le token d'authentification\n * \n * Cet intercepteur ajoute automatiquement le token JWT\n * à toutes les requêtes si il existe dans le localStorage\n */\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n/**\n * Intercepteur pour gérer les erreurs de réponse\n * \n * Cet intercepteur gère :\n * - Les erreurs 401 (non authentifié)\n * - Les erreurs 403 (accès refusé)\n * - Les erreurs de réseau\n * - La redirection vers la page de connexion si nécessaire\n */\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  // Gestion des erreurs d'authentification\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n\n  // Gestion des erreurs d'accès refusé\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403) {\n    console.error('Accès refusé:', error.response.data.message);\n  }\n  return Promise.reject(error);\n});\n\n// ============================================================================\n// ROUTES D'AUTHENTIFICATION\n// ============================================================================\n\n/**\n * Authentification d'un utilisateur\n * @param {Object} credentials - Email et mot de passe\n * @returns {Promise} - Token JWT et informations utilisateur\n */\nexport const login = credentials => api.post('/auth/login', credentials);\n\n/**\n * Déconnexion d'un utilisateur\n * @returns {Promise} - Confirmation de déconnexion\n */\nexport const logout = () => api.post('/auth/logout');\n\n// ============================================================================\n// ROUTES DE GESTION DES UTILISATEURS\n// ============================================================================\n\n/**\n * Récupération de tous les utilisateurs\n * @returns {Promise} - Liste des utilisateurs\n */\nexport const getUsers = () => api.get('/users');\n\n/**\n * Création d'un nouvel utilisateur\n * @param {Object} userData - Données de l'utilisateur\n * @returns {Promise} - Utilisateur créé\n */\nexport const createUser = userData => api.post('/users', userData);\n\n/**\n * Suppression d'un utilisateur\n * @param {number} id - ID de l'utilisateur\n * @returns {Promise} - Confirmation de suppression\n */\nexport const deleteUser = id => api.delete(`/users/${id}`);\n\n/**\n * Modification d'un utilisateur existant\n * @param {number} id - ID de l'utilisateur\n * @param {Object} userData - Données mises à jour\n * @returns {Promise} - Utilisateur modifié\n */\nexport const updateUser = (id, userData) => api.put(`/users/${id}`, userData);\n\n// ============================================================================\n// ROUTES DE GESTION DES CLASSES\n// ============================================================================\n\n/**\n * Récupération de toutes les classes\n * @returns {Promise} - Liste des classes\n */\nexport const getClasses = () => api.get('/classes');\n\n/**\n * Création d'une nouvelle classe\n * @param {Object} classData - Données de la classe\n * @returns {Promise} - Classe créée\n */\nexport const createClass = classData => api.post('/classes', classData);\n\n/**\n * Suppression d'une classe\n * @param {number} id - ID de la classe\n * @returns {Promise} - Confirmation de suppression\n */\nexport const deleteClass = id => api.delete(`/classes/${id}`);\n\n/**\n * Modification d'une classe existante\n * @param {number} id - ID de la classe\n * @param {Object} classData - Données mises à jour\n * @returns {Promise} - Classe modifiée\n */\nexport const updateClass = (id, classData) => api.put(`/classes/${id}`, classData);\n\n// ============================================================================\n// ROUTES DE GESTION DES MESSAGES\n// ============================================================================\n\n/**\n * Récupération de tous les messages de l'utilisateur connecté\n * @returns {Promise} - Messages envoyés et reçus\n */\nexport const getMessages = () => api.get('/messages');\n\n/**\n * Récupération des conversations de l'utilisateur connecté\n * @returns {Promise} - Conversations groupées par utilisateur\n */\nexport const getConversations = () => api.get('/messages/conversations');\n\n/**\n * Récupération des utilisateurs disponibles pour la discussion\n * @returns {Promise} - Liste des utilisateurs avec qui on peut discuter\n */\nexport const getAvailableUsers = () => api.get('/messages/available-users');\n\n/**\n * Envoi d'un nouveau message\n * @param {Object} messageData - Données du message (destinataire_id, contenu)\n * @returns {Promise} - Message envoyé\n */\nexport const sendMessage = messageData => api.post('/messages', messageData);\n\n/**\n * Récupération des messages d'une conversation spécifique\n * @param {number} id - ID de l'utilisateur avec qui on converse\n * @returns {Promise} - Messages de la conversation\n */\nexport const getConversationMessages = id => api.get(`/messages/${id}`);\n\n// ============================================================================\n// ROUTES DE GESTION DES ÉVÉNEMENTS\n// ============================================================================\n\n/**\n * Récupération de tous les événements\n * @returns {Promise} - Liste des événements avec les informations des auteurs\n */\nexport const getEvents = () => api.get('/events');\n\n/**\n * Création d'un nouvel événement (Admin uniquement)\n * @param {Object} eventData - Données de l'événement (titre, description, date)\n * @returns {Promise} - Événement créé\n */\nexport const createEvent = eventData => api.post('/events', eventData);\n\n/**\n * Récupération d'un événement spécifique\n * @param {number} id - ID de l'événement\n * @returns {Promise} - Détails de l'événement\n */\nexport const getEvent = id => api.get(`/events/${id}`);\n\n/**\n * Modification d'un événement (Admin uniquement)\n * @param {number} id - ID de l'événement\n * @param {Object} eventData - Données mises à jour\n * @returns {Promise} - Événement modifié\n */\nexport const updateEvent = (id, eventData) => api.put(`/events/${id}`, eventData);\n\n/**\n * Suppression d'un événement (Admin uniquement)\n * @param {number} id - ID de l'événement\n * @returns {Promise} - Confirmation de suppression\n */\nexport const deleteEvent = id => api.delete(`/events/${id}`);\n\n// ============================================================================\n// ROUTES DE GESTION DES DEVOIRS\n// ============================================================================\n\n/**\n * Récupération des devoirs selon le rôle\n * @returns {Promise} - Devoirs filtrés selon le rôle de l'utilisateur\n */\nexport const getHomework = () => api.get('/homework');\n\n/**\n * Création d'un nouveau devoir (Admin et Professeur uniquement)\n * @param {Object} homeworkData - Données du devoir (titre, description, date_limite, classe_id)\n * @returns {Promise} - Devoir créé\n */\nexport const createHomework = homeworkData => api.post('/homework', homeworkData);\n\n/**\n * Récupération d'un devoir spécifique\n * @param {number} id - ID du devoir\n * @returns {Promise} - Détails du devoir avec les relations\n */\nexport const getHomeworkById = id => api.get(`/homework/${id}`);\n\n/**\n * Modification d'un devoir (Admin et Professeur créateur uniquement)\n * @param {number} id - ID du devoir\n * @param {Object} homeworkData - Données mises à jour\n * @returns {Promise} - Devoir modifié\n */\nexport const updateHomework = (id, homeworkData) => api.put(`/homework/${id}`, homeworkData);\n\n/**\n * Suppression d'un devoir (Admin et Professeur créateur uniquement)\n * @param {number} id - ID du devoir\n * @returns {Promise} - Confirmation de suppression\n */\nexport const deleteHomework = id => api.delete(`/homework/${id}`);\n\n// ============================================================================\n// ROUTES DE GESTION DES NOTES\n// ============================================================================\n\n/**\n * Récupération des notes selon le rôle\n * @returns {Promise} - Notes filtrées selon le rôle de l'utilisateur\n */\nexport const getGrades = () => api.get('/grades');\n\n/**\n * Création d'une nouvelle note (Admin et Professeur uniquement)\n * @param {Object} gradeData - Données de la note (note, matiere, commentaire, eleve_id)\n * @returns {Promise} - Note créée\n */\nexport const createGrade = gradeData => api.post('/grades', gradeData);\n\n/**\n * Récupération d'une note spécifique\n * @param {number} id - ID de la note\n * @returns {Promise} - Détails de la note avec les relations\n */\nexport const getGradeById = id => api.get(`/grades/${id}`);\n\n/**\n * Modification d'une note (Admin et Professeur créateur uniquement)\n * @param {number} id - ID de la note\n * @param {Object} gradeData - Données mises à jour\n * @returns {Promise} - Note modifiée\n */\nexport const updateGrade = (id, gradeData) => api.put(`/grades/${id}`, gradeData);\n\n/**\n * Suppression d'une note (Admin et Professeur créateur uniquement)\n * @param {number} id - ID de la note\n * @returns {Promise} - Confirmation de suppression\n */\nexport const deleteGrade = id => api.delete(`/grades/${id}`);\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","status","removeItem","window","location","href","console","data","message","login","credentials","post","logout","getUsers","get","createUser","userData","deleteUser","id","delete","updateUser","put","getClasses","createClass","classData","deleteClass","updateClass","getMessages","getConversations","getAvailableUsers","sendMessage","messageData","getConversationMessages","getEvents","createEvent","eventData","getEvent","updateEvent","deleteEvent","getHomework","createHomework","homeworkData","getHomeworkById","updateHomework","deleteHomework","getGrades","createGrade","gradeData","getGradeById","updateGrade","deleteGrade"],"sources":["C:/wamp64/www/CSNDR projet/csndr-react-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n/**\n * Configuration de base pour Axios\n * \n * Cette configuration définit :\n * - L'URL de base de l'API Laravel\n * - Les headers par défaut\n * - La gestion des erreurs\n * - La gestion des tokens d'authentification\n */\nconst api = axios.create({\n    // URL de base de l'API Laravel (à ajuster selon votre configuration)\n    baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\n    \n    // Headers par défaut\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n    },\n    \n    // Timeout de 10 secondes pour les requêtes\n    timeout: 10000,\n});\n\n/**\n * Intercepteur pour ajouter le token d'authentification\n * \n * Cet intercepteur ajoute automatiquement le token JWT\n * à toutes les requêtes si il existe dans le localStorage\n */\napi.interceptors.request.use(\n    (config) => {\n        const token = localStorage.getItem('token');\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    }\n);\n\n/**\n * Intercepteur pour gérer les erreurs de réponse\n * \n * Cet intercepteur gère :\n * - Les erreurs 401 (non authentifié)\n * - Les erreurs 403 (accès refusé)\n * - Les erreurs de réseau\n * - La redirection vers la page de connexion si nécessaire\n */\napi.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    (error) => {\n        // Gestion des erreurs d'authentification\n        if (error.response?.status === 401) {\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            window.location.href = '/login';\n        }\n        \n        // Gestion des erreurs d'accès refusé\n        if (error.response?.status === 403) {\n            console.error('Accès refusé:', error.response.data.message);\n        }\n        \n        return Promise.reject(error);\n    }\n);\n\n// ============================================================================\n// ROUTES D'AUTHENTIFICATION\n// ============================================================================\n\n/**\n * Authentification d'un utilisateur\n * @param {Object} credentials - Email et mot de passe\n * @returns {Promise} - Token JWT et informations utilisateur\n */\nexport const login = (credentials) => api.post('/auth/login', credentials);\n\n/**\n * Déconnexion d'un utilisateur\n * @returns {Promise} - Confirmation de déconnexion\n */\nexport const logout = () => api.post('/auth/logout');\n\n// ============================================================================\n// ROUTES DE GESTION DES UTILISATEURS\n// ============================================================================\n\n/**\n * Récupération de tous les utilisateurs\n * @returns {Promise} - Liste des utilisateurs\n */\nexport const getUsers = () => api.get('/users');\n\n/**\n * Création d'un nouvel utilisateur\n * @param {Object} userData - Données de l'utilisateur\n * @returns {Promise} - Utilisateur créé\n */\nexport const createUser = (userData) => api.post('/users', userData);\n\n/**\n * Suppression d'un utilisateur\n * @param {number} id - ID de l'utilisateur\n * @returns {Promise} - Confirmation de suppression\n */\nexport const deleteUser = (id) => api.delete(`/users/${id}`);\n\n/**\n * Modification d'un utilisateur existant\n * @param {number} id - ID de l'utilisateur\n * @param {Object} userData - Données mises à jour\n * @returns {Promise} - Utilisateur modifié\n */\nexport const updateUser = (id, userData) => api.put(`/users/${id}`, userData);\n\n// ============================================================================\n// ROUTES DE GESTION DES CLASSES\n// ============================================================================\n\n/**\n * Récupération de toutes les classes\n * @returns {Promise} - Liste des classes\n */\nexport const getClasses = () => api.get('/classes');\n\n/**\n * Création d'une nouvelle classe\n * @param {Object} classData - Données de la classe\n * @returns {Promise} - Classe créée\n */\nexport const createClass = (classData) => api.post('/classes', classData);\n\n/**\n * Suppression d'une classe\n * @param {number} id - ID de la classe\n * @returns {Promise} - Confirmation de suppression\n */\nexport const deleteClass = (id) => api.delete(`/classes/${id}`);\n\n/**\n * Modification d'une classe existante\n * @param {number} id - ID de la classe\n * @param {Object} classData - Données mises à jour\n * @returns {Promise} - Classe modifiée\n */\nexport const updateClass = (id, classData) => api.put(`/classes/${id}`, classData);\n\n// ============================================================================\n// ROUTES DE GESTION DES MESSAGES\n// ============================================================================\n\n/**\n * Récupération de tous les messages de l'utilisateur connecté\n * @returns {Promise} - Messages envoyés et reçus\n */\nexport const getMessages = () => api.get('/messages');\n\n/**\n * Récupération des conversations de l'utilisateur connecté\n * @returns {Promise} - Conversations groupées par utilisateur\n */\nexport const getConversations = () => api.get('/messages/conversations');\n\n/**\n * Récupération des utilisateurs disponibles pour la discussion\n * @returns {Promise} - Liste des utilisateurs avec qui on peut discuter\n */\nexport const getAvailableUsers = () => api.get('/messages/available-users');\n\n/**\n * Envoi d'un nouveau message\n * @param {Object} messageData - Données du message (destinataire_id, contenu)\n * @returns {Promise} - Message envoyé\n */\nexport const sendMessage = (messageData) => api.post('/messages', messageData);\n\n/**\n * Récupération des messages d'une conversation spécifique\n * @param {number} id - ID de l'utilisateur avec qui on converse\n * @returns {Promise} - Messages de la conversation\n */\nexport const getConversationMessages = (id) => api.get(`/messages/${id}`);\n\n// ============================================================================\n// ROUTES DE GESTION DES ÉVÉNEMENTS\n// ============================================================================\n\n/**\n * Récupération de tous les événements\n * @returns {Promise} - Liste des événements avec les informations des auteurs\n */\nexport const getEvents = () => api.get('/events');\n\n/**\n * Création d'un nouvel événement (Admin uniquement)\n * @param {Object} eventData - Données de l'événement (titre, description, date)\n * @returns {Promise} - Événement créé\n */\nexport const createEvent = (eventData) => api.post('/events', eventData);\n\n/**\n * Récupération d'un événement spécifique\n * @param {number} id - ID de l'événement\n * @returns {Promise} - Détails de l'événement\n */\nexport const getEvent = (id) => api.get(`/events/${id}`);\n\n/**\n * Modification d'un événement (Admin uniquement)\n * @param {number} id - ID de l'événement\n * @param {Object} eventData - Données mises à jour\n * @returns {Promise} - Événement modifié\n */\nexport const updateEvent = (id, eventData) => api.put(`/events/${id}`, eventData);\n\n/**\n * Suppression d'un événement (Admin uniquement)\n * @param {number} id - ID de l'événement\n * @returns {Promise} - Confirmation de suppression\n */\nexport const deleteEvent = (id) => api.delete(`/events/${id}`);\n\n// ============================================================================\n// ROUTES DE GESTION DES DEVOIRS\n// ============================================================================\n\n/**\n * Récupération des devoirs selon le rôle\n * @returns {Promise} - Devoirs filtrés selon le rôle de l'utilisateur\n */\nexport const getHomework = () => api.get('/homework');\n\n/**\n * Création d'un nouveau devoir (Admin et Professeur uniquement)\n * @param {Object} homeworkData - Données du devoir (titre, description, date_limite, classe_id)\n * @returns {Promise} - Devoir créé\n */\nexport const createHomework = (homeworkData) => api.post('/homework', homeworkData);\n\n/**\n * Récupération d'un devoir spécifique\n * @param {number} id - ID du devoir\n * @returns {Promise} - Détails du devoir avec les relations\n */\nexport const getHomeworkById = (id) => api.get(`/homework/${id}`);\n\n/**\n * Modification d'un devoir (Admin et Professeur créateur uniquement)\n * @param {number} id - ID du devoir\n * @param {Object} homeworkData - Données mises à jour\n * @returns {Promise} - Devoir modifié\n */\nexport const updateHomework = (id, homeworkData) => api.put(`/homework/${id}`, homeworkData);\n\n/**\n * Suppression d'un devoir (Admin et Professeur créateur uniquement)\n * @param {number} id - ID du devoir\n * @returns {Promise} - Confirmation de suppression\n */\nexport const deleteHomework = (id) => api.delete(`/homework/${id}`);\n\n// ============================================================================\n// ROUTES DE GESTION DES NOTES\n// ============================================================================\n\n/**\n * Récupération des notes selon le rôle\n * @returns {Promise} - Notes filtrées selon le rôle de l'utilisateur\n */\nexport const getGrades = () => api.get('/grades');\n\n/**\n * Création d'une nouvelle note (Admin et Professeur uniquement)\n * @param {Object} gradeData - Données de la note (note, matiere, commentaire, eleve_id)\n * @returns {Promise} - Note créée\n */\nexport const createGrade = (gradeData) => api.post('/grades', gradeData);\n\n/**\n * Récupération d'une note spécifique\n * @param {number} id - ID de la note\n * @returns {Promise} - Détails de la note avec les relations\n */\nexport const getGradeById = (id) => api.get(`/grades/${id}`);\n\n/**\n * Modification d'une note (Admin et Professeur créateur uniquement)\n * @param {number} id - ID de la note\n * @param {Object} gradeData - Données mises à jour\n * @returns {Promise} - Note modifiée\n */\nexport const updateGrade = (id, gradeData) => api.put(`/grades/${id}`, gradeData);\n\n/**\n * Suppression d'une note (Admin et Professeur créateur uniquement)\n * @param {number} id - ID de la note\n * @returns {Promise} - Confirmation de suppression\n */\nexport const deleteGrade = (id) => api.delete(`/grades/${id}`);\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}