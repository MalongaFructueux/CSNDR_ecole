{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\CSNDR projet\\\\csndr-react-frontend\\\\src\\\\components\\\\RoleBadge.jsx\";\nimport React from 'react';\n\n/**\r\n * Composant RoleBadge - Affichage des badges de rôle avec couleurs distinctives\r\n * \r\n * Ce composant gère :\r\n * - L'affichage des badges de rôle avec des couleurs spécifiques\r\n * - La traduction des rôles en français\r\n * - L'apparence visuelle cohérente avec la charte graphique\r\n * \r\n * Chaque rôle a sa propre couleur :\r\n * - Admin : Rouge (#DC2626) - Accès complet\r\n * - Professeur : Vert (#059669) - Gestion pédagogique\r\n * - Parent : Bleu (#2563EB) - Consultation enfants\r\n * - Élève : Violet (#7C3AED) - Accès limité\r\n * \r\n * @param {string} role - Rôle de l'utilisateur (admin, professeur, parent, eleve)\r\n * @param {string} className - Classes CSS supplémentaires\r\n * @returns {JSX.Element} Badge avec couleur et texte appropriés\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoleBadge = ({\n  role,\n  className = ''\n}) => {\n  /**\r\n   * Configuration des badges selon le rôle\r\n   * Retourne un objet avec les propriétés de style et le label\r\n   */\n  const getRoleConfig = role => {\n    switch (role) {\n      case 'admin':\n        return {\n          backgroundColor: 'bg-role-admin',\n          textColor: 'text-white',\n          borderColor: 'border-role-admin',\n          label: 'Administrateur'\n        };\n      case 'professeur':\n        return {\n          backgroundColor: 'bg-role-professeur',\n          textColor: 'text-white',\n          borderColor: 'border-role-professeur',\n          label: 'Professeur'\n        };\n      case 'parent':\n        return {\n          backgroundColor: 'bg-role-parent',\n          textColor: 'text-white',\n          borderColor: 'border-role-parent',\n          label: 'Parent'\n        };\n      case 'eleve':\n        return {\n          backgroundColor: 'bg-role-eleve',\n          textColor: 'text-white',\n          borderColor: 'border-role-eleve',\n          label: 'Élève'\n        };\n      default:\n        return {\n          backgroundColor: 'bg-gray-500',\n          textColor: 'text-white',\n          borderColor: 'border-gray-500',\n          label: role\n        };\n    }\n  };\n\n  // Récupération de la configuration selon le rôle\n  const config = getRoleConfig(role);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.backgroundColor} ${config.textColor} ${config.borderColor} border ${className}`,\n    children: config.label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_c = RoleBadge;\nexport default RoleBadge;\nvar _c;\n$RefreshReg$(_c, \"RoleBadge\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","RoleBadge","role","className","getRoleConfig","backgroundColor","textColor","borderColor","label","config","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/wamp64/www/CSNDR projet/csndr-react-frontend/src/components/RoleBadge.jsx"],"sourcesContent":["import React from 'react';\r\n\r\n/**\r\n * Composant RoleBadge - Affichage des badges de rôle avec couleurs distinctives\r\n * \r\n * Ce composant gère :\r\n * - L'affichage des badges de rôle avec des couleurs spécifiques\r\n * - La traduction des rôles en français\r\n * - L'apparence visuelle cohérente avec la charte graphique\r\n * \r\n * Chaque rôle a sa propre couleur :\r\n * - Admin : Rouge (#DC2626) - Accès complet\r\n * - Professeur : Vert (#059669) - Gestion pédagogique\r\n * - Parent : Bleu (#2563EB) - Consultation enfants\r\n * - Élève : Violet (#7C3AED) - Accès limité\r\n * \r\n * @param {string} role - Rôle de l'utilisateur (admin, professeur, parent, eleve)\r\n * @param {string} className - Classes CSS supplémentaires\r\n * @returns {JSX.Element} Badge avec couleur et texte appropriés\r\n */\r\nconst RoleBadge = ({ role, className = '' }) => {\r\n  /**\r\n   * Configuration des badges selon le rôle\r\n   * Retourne un objet avec les propriétés de style et le label\r\n   */\r\n  const getRoleConfig = (role) => {\r\n    switch (role) {\r\n      case 'admin':\r\n        return {\r\n          backgroundColor: 'bg-role-admin',\r\n          textColor: 'text-white',\r\n          borderColor: 'border-role-admin',\r\n          label: 'Administrateur'\r\n        };\r\n      case 'professeur':\r\n        return {\r\n          backgroundColor: 'bg-role-professeur',\r\n          textColor: 'text-white',\r\n          borderColor: 'border-role-professeur',\r\n          label: 'Professeur'\r\n        };\r\n      case 'parent':\r\n        return {\r\n          backgroundColor: 'bg-role-parent',\r\n          textColor: 'text-white',\r\n          borderColor: 'border-role-parent',\r\n          label: 'Parent'\r\n        };\r\n      case 'eleve':\r\n        return {\r\n          backgroundColor: 'bg-role-eleve',\r\n          textColor: 'text-white',\r\n          borderColor: 'border-role-eleve',\r\n          label: 'Élève'\r\n        };\r\n      default:\r\n        return {\r\n          backgroundColor: 'bg-gray-500',\r\n          textColor: 'text-white',\r\n          borderColor: 'border-gray-500',\r\n          label: role\r\n        };\r\n    }\r\n  };\r\n\r\n  // Récupération de la configuration selon le rôle\r\n  const config = getRoleConfig(role);\r\n\r\n  return (\r\n    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.backgroundColor} ${config.textColor} ${config.borderColor} border ${className}`}>\r\n      {config.label}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default RoleBadge;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA,SAAAC,MAAA,IAAAC,OAAA;AAkBA,MAAMC,SAAS,GAAGA,CAAC;EAAEC,IAAI;EAAEC,SAAS,GAAG;AAAG,CAAC,KAAK;EAC9C;AACF;AACA;AACA;EACE,MAAMC,aAAa,GAAIF,IAAI,IAAK;IAC9B,QAAQA,IAAI;MACV,KAAK,OAAO;QACV,OAAO;UACLG,eAAe,EAAE,eAAe;UAChCC,SAAS,EAAE,YAAY;UACvBC,WAAW,EAAE,mBAAmB;UAChCC,KAAK,EAAE;QACT,CAAC;MACH,KAAK,YAAY;QACf,OAAO;UACLH,eAAe,EAAE,oBAAoB;UACrCC,SAAS,EAAE,YAAY;UACvBC,WAAW,EAAE,wBAAwB;UACrCC,KAAK,EAAE;QACT,CAAC;MACH,KAAK,QAAQ;QACX,OAAO;UACLH,eAAe,EAAE,gBAAgB;UACjCC,SAAS,EAAE,YAAY;UACvBC,WAAW,EAAE,oBAAoB;UACjCC,KAAK,EAAE;QACT,CAAC;MACH,KAAK,OAAO;QACV,OAAO;UACLH,eAAe,EAAE,eAAe;UAChCC,SAAS,EAAE,YAAY;UACvBC,WAAW,EAAE,mBAAmB;UAChCC,KAAK,EAAE;QACT,CAAC;MACH;QACE,OAAO;UACLH,eAAe,EAAE,aAAa;UAC9BC,SAAS,EAAE,YAAY;UACvBC,WAAW,EAAE,iBAAiB;UAC9BC,KAAK,EAAEN;QACT,CAAC;IACL;EACF,CAAC;;EAED;EACA,MAAMO,MAAM,GAAGL,aAAa,CAACF,IAAI,CAAC;EAElC,oBACEF,OAAA;IAAMG,SAAS,EAAE,2EAA2EM,MAAM,CAACJ,eAAe,IAAII,MAAM,CAACH,SAAS,IAAIG,MAAM,CAACF,WAAW,WAAWJ,SAAS,EAAG;IAAAO,QAAA,EAChLD,MAAM,CAACD;EAAK;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEX,CAAC;AAACC,EAAA,GArDId,SAAS;AAuDf,eAAeA,SAAS;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}